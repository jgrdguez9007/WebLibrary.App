@model WebLibrary.App.Controllers.SearchController.SearchVm
@using System.Text.RegularExpressions
@using System.Net

@{
  ViewData["Title"] = "Buscar";
}

@functions {
  // Resalta términos (>=3 chars) de la consulta dentro de un texto.
  // Primero codifica HTML para seguridad; luego inserta <strong> sobre coincidencias.
  public static string Highlight(string? text, string? query)
  {
    text ??= "";
    query ??= "";
    var encoded = WebUtility.HtmlEncode(text);
    if (string.IsNullOrWhiteSpace(query)) return encoded;

    var terms = Regex.Matches(query, @"[\p{L}\p{Nd}]{3,}")
                     .Cast<Match>()
                     .Select(m => Regex.Escape(m.Value))
                     .Distinct()
                     .ToArray();
    if (terms.Length == 0) return encoded;

    var pattern = string.Join("|", terms);
    return Regex.Replace(
      encoded,
      pattern,
      m => $"<strong>{m.Value}</strong>",
      RegexOptions.IgnoreCase | RegexOptions.CultureInvariant
    );
  }
}

<section class="space-y-8">
  <!-- Buscador -->
  <form method="get" action="/search" class="flex gap-2">
    <input name="q" value="@Model.Q" placeholder="Buscar en el contenido…"
           class="flex-1 rounded-xl border border-slate-300 px-4 py-3"
           autofocus />
    <button class="rounded-xl bg-indigo-600 text-white px-5 py-3 hover:bg-indigo-700 transition">
      Buscar
    </button>
  </form>

  @if (!string.IsNullOrWhiteSpace(Model.Q))
  {
    <p class="text-sm text-slate-500">
      @Model.Count resultado@(Model.Count==1?"":"s") en @Model.ElapsedMs ms
    </p>
  }

  @if (Model.Results == null || Model.Results.Count == 0)
  {
    if (!string.IsNullOrWhiteSpace(Model.Q))
    {
      <div class="rounded-2xl border bg-white p-10 text-center text-slate-600">
        Sin resultados para <strong>@Model.Q</strong>.
      </div>
    }
  }
  else
  {
    <ul class="space-y-5">
      @foreach (var r in Model.Results)
      {
        // --- Normalización de páginas (fallback para JSON antiguos base-0) ---
        var pStart = (r.PageStart <= 0 || r.PageEnd <= 0) ? r.PageStart + 1 : r.PageStart;
        var pEnd   = (r.PageStart <= 0 || r.PageEnd <= 0) ? r.PageEnd + 1   : r.PageEnd;
        if (pStart < 1) pStart = 1;
        if (pEnd   < pStart) pEnd = pStart;

        var pdfTarget = !string.IsNullOrEmpty(r.PdfUrl)
                        ? $"{r.PdfUrl}#page={Math.Max(1, pStart)}"
                        : "";

        <li class="rounded-xl bg-white shadow-sm ring-1 ring-black/5 p-5">
          <div class="flex gap-4">
            <div class="hidden sm:grid place-items-center w-24 h-24 bg-slate-100 rounded-lg overflow-hidden">
              <img src="@r.ThumbUrl" alt="Portada" class="max-w-full max-h-full object-contain" />
            </div>
            <div class="flex-1">
              <div class="text-[11px] uppercase tracking-wide text-slate-500">
                @(string.IsNullOrEmpty(r.Category) ? "" : r.Category.Replace("-", " "))
                @(string.IsNullOrEmpty(r.DocType) ? "" : " · " + r.DocType.Replace("-", " "))
                @(pStart>0 ? $" · p.{pStart}-{pEnd}" : "")
              </div>

              <h3 class="mt-0.5 font-semibold">
                @Html.Raw(Highlight(r.Title, Model.Q))
                <span class="ml-2 align-middle text-[10px] text-slate-400">(@Math.Round(r.Score,2))</span>
              </h3>

              @if (!string.IsNullOrWhiteSpace(r.Excerpt))
              {
                <p class="mt-2 text-sm text-slate-700">
                  @Html.Raw(Highlight(r.Excerpt, Model.Q))
                </p>
              }

              <div class="mt-3">
                @if (!string.IsNullOrEmpty(pdfTarget))
                {
                  <a href="@pdfTarget" target="_blank"
                     class="rounded-lg bg-slate-900 text-white px-3 py-1.5 text-sm hover:bg-slate-700">
                    Ver PDF
                  </a>
                }
                else
                {
                  <span class="text-xs text-slate-500">PDF no disponible</span>
                }
              </div>
            </div>
          </div>
        </li>
      }
    </ul>
  }
</section>
